<%= form_for(@invitation, html: { class: 'form-horizontal' }) do |f| %>
  <div class="box-body" data-behavior="invitation-form">
    <div class="form-group <%= 'has-error' unless @invitation.errors[:category_id].blank? %>">
      <label class="col-sm-2 control-label">Categoría</label>
      <div class="col-sm-10">
        <%= f.collection_select :category_id, Category.all, :id, :name, {prompt: 'Seleccione la categoría' },
                                class: 'form-control', required: true, data: { behavior: 'category'} %>
        <span><%= @invitation.errors[:category_id].first %></span>
      </div>
    </div>

    <div class="form-group <%= 'has-error' unless @invitation.errors[:subcategory_id].blank? %>">
      <label class="col-sm-2 control-label">Subcategoría</label>
      <div class="col-sm-10">
        <div data-behavior="subcategories">
          <%= render partial: 'subcategories_element', locals: { subcategories: @subcategories } %>
        </div>
        <span><%= @invitation.errors[:subcategory_id].first %></span>
      </div>
    </div>

    <div class="form-group <%= 'has-error' unless @invitation.errors[:name].blank? %>">
      <label class="col-sm-2 control-label">Nombre</label>
      <div class="col-sm-10">
        <%= f.text_field :name, class: 'form-control', required: true %>
        <span><%= @invitation.errors[:name].first %></span>
      </div>
    </div>

    <div class="form-group">
      <label class="col-sm-2 control-label">Fotografia</label>
      <div class="col-sm-10">
        <%= f.file_field :imagen, class: "form-control", accept: 'image/png,image/gif,image/jpeg,image/jpg' %>
        <% src = @invitation.new_record? ? "#" : @invitation.imagen_url %>
        <% hidden = @invitation.new_record? ? "hidden" : "" %>
        <img id="img_prev" width=200 height=200 src="<%= src %>" alt="Fotografia" class="img-thumbnail <%= hidden %>"/> <br/>
      </div>
      <%= f.hidden_field :imagen_cache %>
    </div>

    <div class="form-group <%= 'has-error' unless @invitation.errors[:description].blank? %>">
      <label class="col-sm-2 control-label">Descripción</label>
      <div class="col-sm-10">
        <%= f.text_area :description, class: 'form-control' %>
        <span><%= @invitation.errors[:description].first %></span>
      </div>
    </div>


  </div>
  <!-- /.box-body -->
  <div class="box-footer">
    <%= f.submit 'Guardar', class: 'btn btn-info pull-right btn-block' %>
  </div>
  <!-- /.box-footer -->
<% end %>

<script>
  readInvitationURL($("#invitation_imagen_cache"));

  $("#invitation_imagen").change(function(){
    $('#img_prev').removeClass('hidden');
    readInvitationURL(this);
  });

  function readInvitationURL(input) {
    if (input.files && input.files[0]) {
      var reader = new FileReader();

      reader.onload = function (e) {
        $('#img_prev').attr('src', e.target.result);
      }
      reader.readAsDataURL(input.files[0]);
    } else {
      console.log("URL INVITATION: " + input.val());
      if(input.val() != "" && input.val() != undefined) {
          $('#img_prev').removeClass('hidden');
          $('#img_prev').attr('src', "uploads/tmp/" + input.val());
      }
    }
  }
</script>

<script>
  $(document).ready(function() {
    $('.autocomplete_printing_products').select2({
      minimumInputLength: 3,
      ajax: {
        delay: 250,
        url: "/printing_products/autocomplete_invitations",
        dataType: 'json',
        cache: true
      },
      escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
      templateResult: formatRepo,
      templateSelection: formatRepoSelection
    });

    function formatRepo (printing_product) {
      if (printing_product.loading) {
        return printing_product.text;
      }

      var markup = "<div class='select2-result-repository__meta'>" +
        "<div class='select2-result-repository__title'>" + printing_product.code + "</div>";

        if (printing_product.text) {
          markup += "<div class='select2-result-repository__description'>" + printing_product.text + " (" + printing_product.sale_unit + ")"  +"</div>";
        }

        markup += "</div>";

        return markup;
    }

    function formatRepoSelection (printing_product) {
        return printing_product.text || printing_product.code;
    }

    $('.autocomplete_printing_products').on('select2:select', function (e) {
        var data = e.params.data;
        $.ajax({
          url: "/invitations/add_printing_product",
          method: "get",
          dataType: "script",
          data: {
            printing_product: data,
            invitation_id: <%= @invitation.new_record? ? -1 : @invitation.id %>
          },
          beforeSend: function(xhr) {
            $("#invitation_printing_products").LoadingOverlay("show");
          },
          complete: function(xhr) {
            $("#invitation_printing_products").LoadingOverlay("hide", true);
          }
        })
    });
  });
</script>
