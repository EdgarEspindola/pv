<button class="box-header header_paid with-border accordion_paid">
  <h3 class="box-title"><%= "Ingresar Pago <span style='color: #001F3F;'>#{@service.frequently_client_label}</span>".html_safe %></h3>
</button>
<div class="panel">
  <%= form_for(@service, { html: {class: 'form-horizontal', remote: true }}) do |f| %>
  <%= f.hidden_field :image_client, value: nil, id: 'image_web_cam' %>

  <div class="row">
    <div class="col-md-5">
      <div class="form-group">
        <label class="col-md-5 control-label">Cobrado por</label>
        <div class="col-md-7">
          <%= f.collection_select :employee_id, User.all, :id, :formal_name, { prompt: 'Seleccione un empleado' }, class: 'form-control', required: true %>
          <div class="invalid-feedback"><%= @service.errors[:employee_id].first %></div>
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-5 text-center control-label">Fecha de Ingreso</label>
        <div class="col-md-7">
          <%= f.text_field :date_of_entry, class: 'form-control datepicker', autocomplete: 'off', required: true %>
          <div class="invalid-feedback"><%= @service.errors[:date_of_entry].first %></div>
        </div>
      </div>
      <div class="form-group">
        <label class="col-md-5 control-label">Tipo de Pago</label>
        <div class="col-md-7">
          <%= f.collection_select :payment_type_id, PaymentType.all, :id, :name, { prompt: 'Seleccione un tipo de pago' }, class: 'form-control', required: true %>
          <div class="invalid-feedback"><%= @service.errors[:payment_type_id].first %></div>
        </div>
      </div>

      <div class="form-group">
        <label class="col-md-5 control-label">Mano de Obra</label>
        <div class="col-md-7">
          <% if @service.generic_price.present? %>
            <% from_generic_price = true %>
            <% generic_price = {@service.generic_price.name_price => @service.generic_price.id} %>
          <% else %>
            <% from_generic_price = false %>
            <% generic_price = {@service.worforce => @service.worforce} %>
          <% end %>
          <%= hidden_field_tag :from_generic_price, from_generic_price, id: 'from_generic_price' %>
          <%= select_tag 'price', options_for_select(generic_price), class: 'form-control autocomplete_generic_prices', required: true %>
          <div class="invalid-feedback"><%= @service.errors[:worforce].first %></div>
        </div>
      </div>
      <div class="form-group">
        <label class="col-md-5 control-label">Descuento</label>
        <div class="col-md-7">
          <div class="input-group">
            <%= f.text_field :discount, class: 'form-control form-control-sm', required: true %>
            <span class="input-group-addon">%</span>
          </div>
          <div class="invalid-feedback"><%= @service.errors[:discount].first %></div>
        </div>
      </div>
      <div class="form-group">
        <label class="col-md-5 control-label">Fecha de Salida</label>
        <div class="col-md-7">
          <%= f.text_field :departure_date, class: 'form-control form-control-sm datepicker', autocomplete: 'off', required: true %>
          <div class="invalid-feedback"><%= @service.errors[:departure_date].first %></div>
        </div>
      </div>
      <%= render "services/image_client" %>      
    </div>

    <div class="col-md-7">
      <div class="form-group text-center">
        <label>Refacciones usadas</label>
        <select name="[spare_part_id]" class="form-control autocomplete_spare_parts" data-remote="true" data-url="/spare_parts/new" data-method="get">
          <option value="">Seleccione la refacción</option>
        </select>
      </div>
      <table class="table table-striped">
        <thead>
          <tr>
            <th>#</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Cantidad</th>
            <th>Precio</th>
          </tr>
        </thead>
        <tbody id="spare_parts_used_by_service">
        </tbody>
      </table>

      <div class="table-responsive" id="total_to_paid_by_spare_parts_used_by_service">
      </div>

      <%= f.submit '$ Pagar', id: 'btn_paid', class: 'btn bg-green color-palette btn-block btn-flat', disabled: 'disabled' %>

    </div>
  </div>
  <% end %>
</div>

<script>
  $(document).ready(function() {
    $('.autocomplete_generic_prices').select2({
      tags: true,
      minimumInputLength: 1,
      ajax: {
        delay: 250,
        url: "/generic_prices/autocomplete",
        dataType: 'json',
        cache: true
      },
      createTag: function (params) {
        console.log("Tag created...");
        var term = Number($.trim(params.term));

        if (isNaN(term)) {
          console.log("Tag no valid");
          return null;
        }

        return {
          id: term,
          text: term,
          newTag: true // add additional parameters
        }
      }
    });

    $('.autocomplete_generic_prices').on('select2:select', function (e) {
        console.log("Option selected...");
        var data = e.params.data;
        if(data.newTag) {
          $("#from_generic_price").val(false);
          update_worforce(data.text);
        } else {
          $("#from_generic_price").val(true);

          var text = data.text.split("-")[1].trim();
          console.log(text)
          update_worforce(text);
        }
    });

  });

  setDatePicker($(".datepicker"));
  setCurrency($("#service_worforce"));
  setPercentage($("#service_discount"));

  $('.autocomplete_spare_parts').select2({
    minimumInputLength: 3,
    ajax: {
      delay: 250,
      url: "/spare_parts/autocomplete",
      dataType: 'json',
      cache: true
    },
    escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
    templateResult: formatRepo,
    templateSelection: formatRepoSelection
  });

  function formatRepo (spare_part) {
    if (spare_part.loading) {
      return spare_part.text;
    }

    var markup = "<div class='select2-result-repository__meta'>" +
      "<div class='select2-result-repository__title'>" + spare_part.text + "</div>";

      if (spare_part.description) {
        markup += "<div class='select2-result-repository__description'>" + spare_part.description + "</div>";
      }

      markup += "</div>";

      return markup;
    }

  function formatRepoSelection (spare_part) {
      return spare_part.description || spare_part.text;
    }

  $('.autocomplete_spare_parts').on('select2:select', function (e) {
      var data = e.params.data;
      $.ajax({
        url: "/services/add_spare_part",
        method: "get",
        dataType: "script",
        data: {
          spare_part: data
        },
        beforeSend: function(xhr) {
          $("#spare_parts_used_by_service").LoadingOverlay("show");
        },
        complete: function(xhr) {
          $("#spare_parts_used_by_service").LoadingOverlay("hide", true);
        }
      })
    });

  //$("#service_worforce").on("keydown", _.debounce(update_worforce, 1000));

  function update_worforce(newPrice) {
      $.ajax({
        url: "/services/update_worforce",
        method: "put",
        dataType: "script",
        data: {
          worforce: newPrice
        },
        beforeSend: function(xhr) {
          $("#total_to_paid_by_spare_parts_used_by_service").LoadingOverlay("show");
        },
        complete: function(xhr, status) {
          $("#total_to_paid_by_spare_parts_used_by_service").LoadingOverlay("hide", true);
        }

      });
  }

  $("#service_discount").on("keydown", _.debounce(update_discount, 1000));

  function update_discount() {
      $.ajax({
        url: "/services/update_discount",
        method: "put",
        dataType: "script",
        data: {
          discount: $(this).val()
        },
        beforeSend: function(xhr) {
          $("#total_to_paid_by_spare_parts_used_by_service").LoadingOverlay("show");
        },
        complete: function(xhr, status) {
          $("#total_to_paid_by_spare_parts_used_by_service").LoadingOverlay("hide", true);
        }
      });
    }
</script>

<script>
    $(document).ready(function() {
      var acc = document.getElementsByClassName("accordion_paid");
      activeAcordionPanels(acc);
    });
</script>

<script>
    $(document).ready(function() {
      var streamObject;
      var $takepicturebutton = $("#takepicture");
      var width = 320;
      var height = 0;

      function openCamera() {
        var streaming = false,
        video        = document.querySelector('#video'),
        canvas       = document.querySelector('#canvas');
        //$takepicturebutton  = $("#takepicture"),


        navigator.getMedia = ( navigator.getUserMedia ||
        navigator.webkitGetUserMedia ||
        navigator.mozGetUserMedia ||
        navigator.msGetUserMedia);

        navigator.getMedia({ video: true, audio: false}, function(stream) {
          if (navigator.mozGetUserMedia) {
            video.mozSrcObject = stream;
          } else {
            var vendorURL = window.URL || window.webkitURL;
            video.srcObject = stream;
            //video.play();
            //video.src = vendorURL.createObjectURL(stream);
          }
          streamObject = stream;
          video.play();

        }, function(err) {
          console.log("An error occured! " + err);
          $takepicturebutton.addClass("disabled");
        });

        video.addEventListener('canplay', function(ev){
          if (!streaming) {
            height = video.videoHeight / (video.videoWidth/width);
            video.setAttribute('width', width);
            video.setAttribute('height', height);
            canvas.setAttribute('width', width);
            canvas.setAttribute('height', height);
            streaming = true;
          }
        }, false);
      }

      function takepicture() {
        var canvas = document.querySelector('#canvas');
        var $canvas = $("#canvas");
        canvas.width = width;
        canvas.height = height;
        canvas.style.display = "block";
        canvas.getContext('2d').drawImage(video, 0, 0, width, height);

        $takepicturebutton
        .removeClass("btn-primary")
        .addClass("btn-danger")
        .attr("data-takepicture", false)
        .html('<b><i class="fa fa-fw fa-remove"></i></b>');

        video.style.display = "none";

        var data = canvas.toDataURL('image/png');
        document.getElementById('image_web_cam').value = data;

        var track = streamObject.getTracks()[0];
        track.stop();
      }

      function deletepicture() {
        openCamera();
        var $canvas = $("#canvas");
        video.style.display = "block";
        $canvas.css("display", "none");

        $takepicturebutton
        .removeClass("btn-danger")
        .addClass("btn-primary")
        .attr("data-takepicture", true)
        .html('<b><i class="fa fa-fw fa-camera"></i></b>');

        document.getElementById('image_web_cam').value = "";
      }

      openCamera();

      $takepicturebutton.click(function(ev){
        console.log("Take picture");
        if($(this).attr('data-takepicture') == "true" ) {
          takepicture();
        } else {
          deletepicture();
        }

        ev.preventDefault();
      });

      //edit_service_11
      $('#edit_service_<%= "#{@service.id}" %>').on("ajax:beforeSend", function() {
        console.log("STOP WEB CAM");
        var track = streamObject.getTracks()[0];
        track.stop();
      });

    });
</script>
